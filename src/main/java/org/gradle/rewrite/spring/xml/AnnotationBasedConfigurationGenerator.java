package org.gradle.rewrite.spring.xml;

import org.openrewrite.Parser;
import org.openrewrite.Refactor;
import org.openrewrite.RefactorResult;
import org.springframework.context.annotation.Configuration;

import java.nio.file.Path;

/**
 * Generates a {@link Configuration} class for a Spring XML configuration.
 *
 * TODO Update {@link RefactorResult} to allow git diffs of new files, XML files, etc.
 *
 * TODO Inject a {@link Refactor} to allow subsequent transformations to take place on generated code. In this way, we can have different "Organize Imports", formatting, etc. across projects and generate once without concern for that.
 */
public class AnnotationBasedConfigurationGenerator {
    // TODO should Refactor be immutable so that this generator can add its own visitors when that is easier than generating code text?
    private final Refactor refactor;

    private final Parser parser;
    private final Path sourceSet;
    private final String sourcePackage;

    public AnnotationBasedConfigurationGenerator(Refactor refactor, Parser parser, Path sourceSet, String sourcePackage) {
        this.refactor = refactor;
        this.parser = parser;
        this.sourceSet = sourceSet;
        this.sourcePackage = sourcePackage;
    }

    public RefactorResult generate() {
        return null;
    }
}

/**
 * The difference between a raw generator and a Java generator is that source generated by a raw generator
 * cannot be processed by {@link Refactor}, so whatever is generated initially is what remains in the diff.
 */
abstract class RawGenerator {
    private final Path sourceSet;
    private final String sourcePackage;

    protected RawGenerator(Path sourceSet, String sourcePackage) {
        this.sourceSet = sourceSet;
        this.sourcePackage = sourcePackage;
    }

    abstract RefactorResult generate();
}
